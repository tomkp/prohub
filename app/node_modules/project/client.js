var dom = require('dom-events');
var classList = require('class-list');
var insertcss = require('insert-css');
var charts = require('./charts');
var loader = require('./loader');
var summarybar = require('summarybar');
var filtertable = require('filtertable');
var forEach = Array.prototype.forEach;

var addBtn = document.querySelector('.add');
var closeBtn = document.querySelector('.modal-close');
var okBtn = document.querySelector('.modal-ok');
var refreshBtn = document.querySelector('.refresh');
var repoInput = document.querySelector('.repo-name');
var responseP = document.querySelector('.response p');
var addModal = document.querySelector('.modal');
var loadedSpan = document.querySelector('.loaded');
var projectnameDiv = document.querySelector('.projectname');

var addModalCL = classList(addModal);
var load = loader('.loading');
var projectData;
var filters = [];
var projectId;


function getLocalData() {

  //
  // get the data for this project from localstorage,
  // if it does not exist, send an event to the server 
  // to tell it that we would like it.
  //
  var saveddata = localStorage['project-' + projectId];

  if (saveddata) {
    projectData = JSON.parse(saveddata);
    fillPage(projectData);
  }
  else {
    getRemoteData();
  }
}


function getRemoteData() {
  filters.length = 0;
  load.show();
  streamWriter({
    page: 'project',
    project: projectId
  });
}


function fillPage(data, clickEvent) {

  projectnameDiv.innerHTML = '/ ' + data.name;

  if (!Object.keys(data.repos).length) return;

  if (!clickEvent) {
    filtertable(data.repos, filterByRepo);
  }

  summarybar(data.repos, filters);
  charts.milestones(data.repos, filters);
  charts.datebar(data.repos, filters);
  charts.contributions(data.repos, filters);
  load.hide();
}


function filterByRepo(event) {

  var cl = classList(this);
  var id = this.id;

  if (event.target.tagName == 'I') {
    return streamWriter({
      page: 'project',
      remove: {
        repo: id
      }
    });
  }

  if (cl.contains('selected')) {
    cl.remove('selected');
    filters.splice(filters.indexOf(id), 1);
  }
  else {
    cl.add('selected');
    filters.push(id);
  }
  fillPage(projectData, true);
}


function streamWriter(stream) {
  streamWriter = function(json) {
    stream.write(json);
  }
}


function streamReader(stream) {
  stream.on('json', function(data) {

    if (data.project) {

      console.log(data.project)

      projectData = data.project;

      localStorage['project-' + projectId] = 
        JSON.stringify(projectData);

      fillPage(projectData);
    }

    if (data.loading) {
      console.log(data.loading)
      loadedSpan.innerHTML = data.loading.url;
      load.update(data.loading.percentage);
    }

    if (data.repo) {
      if (data.error) {
        return responseP.innerHTML = 'Sorry I cant find that.';
      }
      okBtn.style.display = 'none';
      responseP.innerHTML = 'That repo has been added!';
      dom.once(closeBtn, 'click', getRemoteData.bind(null, stream));
    }
  });
}


function Reload(stream, match) {
  projectId = match.params.id;
  getLocalData(stream);
  streamWriter(stream);
  streamReader(stream);
}


function Load(stream, match) {

  projectId = match.params.id;

  //
  // matcht the url, if it's not a match send the
  // user back to the home page, we need an id.
  //
  if (!match('/project/:id')) {
    location.pathname = '/home';
  }

  //
  // set up the dom events for the ui.
  //
  forEach.call(document.querySelectorAll('.tabs label'), function(el) {
    dom.on(el, 'click', function() {
      setTimeout(window.onresize, 100);
    });
  });

  dom.on(refreshBtn, 'click', getRemoteData.bind(null, stream));

  dom.on(addBtn, 'click', function() {
    okBtn.style.display = 'inline-block';
    responseP.innerHTML = '';
    repoInput.value = '';
    return addModalCL.add('modal-show');
  });

  dom.on(closeBtn, 'click', function() {
    return addModalCL.remove('modal-show');
  });

  dom.on(okBtn, 'click', function() {

    if (repoInput.value == '') {
      responseP.innerHTML = 'Must have a valid url';
      return;
    }

    responseP.innerHTML = 'Looking up that project...';

    streamWriter({
      page: 'project',
      repo: {
        url: repoInput.value,
        projectId: projectId 
      }
    });
  });

  dom.on(repoInput, 'focus', function() {
    responseP.innerHTML = '';
  });
 
  streamWriter(stream);
  streamReader(stream);
  getLocalData(stream);
};

module.exports = Load;

