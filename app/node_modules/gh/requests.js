var paramify = require('paramify');
var cookie = require('cookie');
var githubOAuth = require('github-oauth');
var moment = require('moment');
var config = require('rc')('prohub');
var urlutil = require('url');

if (!config.githubClient || !config.githubSecret) {
  console.error('CONFIGURATION ERROR: ' +
    'Can not start without a githubClient Id or a githubSecret');
  process.exit(1);
}

var auth = githubOAuth({
  githubClient: config.githubClient,
  githubSecret: config.githubSecret,
  baseURL: config.baseURL,
  loginURI: '/login',
  callbackURI: '/callback',
  scope: 'user:email,repo'
});

auth.on('error', function(err, res) {
  console.error('there was a login error', err);
  throw new Error('auth error');
});

auth.on('token', function(token, res) {
  var date = moment().add(30, 'days').toDate();
  token = JSON.stringify(token);

  res.writeHeader(302, {
    'Content-Type': 'text/html',
    'Set-Cookie': cookie.serialize('token', token, {
      path: '/',
      expires: date
    }),
    'Location': '/'
  });

  res.end();
});

exports.test = function(req, res) {
  var match = paramify(urlutil.parse(req.url).pathname);
 
  if (match('/login') || match('/callback')) 
    return true;
};

exports.handler = function(req, res) {
  var match = paramify(urlutil.parse(req.url).pathname);
  console.log('X')
  if (match('/login')) 
    return auth.login(req, res);

  if (match('/callback')) {
    return auth.callback(req, res);
  }
};

